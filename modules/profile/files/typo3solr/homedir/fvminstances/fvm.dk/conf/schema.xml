<?xml version="1.0" encoding="UTF-8" ?>
<!-- $Id$ -->

<!--
	This is the special Solr schema file for FVM. It is a copy of the general schema.xml file but includes
	 a new keywordString type, and fields for keyword_facet and taxonomy fields. I also adheres to a slightly
	 diffeent structure thatn EXT:normaly uses. Instead of have a typo3cores instanceDir with one core per
	 site, we instead have on instanceDir per site. This is because we need differen stopwords, synonyms, protwords
	 and elevate.xml files for each site.

-->

<!--
	The schema name property is constructed as follows

	tx_solr		- The extension key
	x-y-z		- The extension version this schema is meant to work with
	YYYYMMDD	- The date the schema file was changed the last time

	When changing the schema the name property must be updated. There is a
	status report - tx_solr_report_SchemaStatus - checking against this
	name property, that status check must be updated as well.
-->
<schema name="tx_solr-2-8-0--20120925" version="1.5" >
	<!-- attribute "name" is the name of this schema and is only used for display purposes.
		Applications should change this to reflect the nature of the search collection.
		version="1.4" is Solr's version number for the schema syntax and semantics.  It should
		not normally be changed by applications.
		1.0: multiValued attribute did not exist, all fields are multiValued by nature
		1.1: multiValued attribute introduced, false by default
		1.2: omitTermFreqAndPositions attribute introduced, true by default except for text fields.
		1.3: removed optional field compress feature
		1.4: default auto-phrase (QueryParser feature) to off
		1.5: omitNorms defaults to true for primitive field types (int, float, boolean, string...)
	-->

	<!-- xinclude fields -->
	<xi:include href="../../generalConf/general_schema_types.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>

	<types>
		<!-- A text field that uses WordDelimiterFilter to enable splitting and matching of
			words on case-change, alpha numeric boundaries, and non-alphanumeric chars,
			so that a query of "wifi" or "wi fi" could match a document containing "Wi-Fi".
			Synonyms and stopwords are customized by external files, and stemming is enabled.
			Duplicate tokens at the same position (which may result from Stemmed Synonyms or
			WordDelim parts) are removed.
			-->
		<fieldType name="text" class="solr.TextField" positionIncrementGap="100">
			<analyzer type="index">
				<tokenizer class="solr.WhitespaceTokenizerFactory"/>

				<filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="0" splitOnCaseChange="1" preserveOriginal="1"/>
				<!-- Case insensitive stop word removal.
					add enablePositionIncrements=true in both the index and query
					analyzers to leave a 'gap' for more accurate phrase queries.
				-->
				<filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
				<filter class="solr.StopFilterFactory"
						ignoreCase="true"
						words="stopwords.txt"
						enablePositionIncrements="true"
				/>
				<filter class="solr.LowerCaseFilterFactory"/>
				<filter class="solr.SnowballPorterFilterFactory" language="Danish" protected="protwords.txt"/>
				<filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
			</analyzer>
			<analyzer type="query">
				<tokenizer class="solr.WhitespaceTokenizerFactory"/>

				<filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="0" catenateNumbers="0" catenateAll="0" splitOnCaseChange="1" preserveOriginal="1"/>
				<filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
				<filter class="solr.StopFilterFactory"
						ignoreCase="true"
						words="stopwords.txt"
						enablePositionIncrements="true"
				/>
				<filter class="solr.LowerCaseFilterFactory"/>
				<filter class="solr.SnowballPorterFilterFactory" language="Danish" protected="protwords.txt"/>
				<filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
			</analyzer>
		</fieldType>


		<!-- Less flexible matching, but less false matches.	Probably not ideal for product names,
			but may be good for SKUs.	Can insert dashes in the wrong place and still match. -->
		<fieldType name="textTight" class="solr.TextField" positionIncrementGap="100" >
			<analyzer>
				<tokenizer class="solr.WhitespaceTokenizerFactory"/>

				<filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="false"/>
				<filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
				<filter class="solr.WordDelimiterFilterFactory" generateWordParts="0" generateNumberParts="0" catenateWords="1" catenateNumbers="1" catenateAll="0" preserveOriginal="1"/>
				<filter class="solr.LowerCaseFilterFactory"/>
				<filter class="solr.SnowballPorterFilterFactory" language="Danish" protected="protwords.txt"/>
				<filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
			</analyzer>
		</fieldType>

		<!-- Setup simple analysis for spell checking -->
		<fieldType name="textSpell" class="solr.TextField" positionIncrementGap="100" omitNorms="true">
			<analyzer type="index">
				<tokenizer class="solr.StandardTokenizerFactory"/>

				<filter class="solr.LowerCaseFilterFactory"/>
				<filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
				<filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
				<filter class="solr.StandardFilterFactory" />
				<filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
			</analyzer>
			<analyzer type="query">
				<tokenizer class="solr.StandardTokenizerFactory" />

				<filter class="solr.LowerCaseFilterFactory"/>
				<filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
				<filter class="solr.StandardFilterFactory" />
				<filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
			</analyzer>
		</fieldType>
		<fieldType name="keywordString" class="solr.TextField" positionIncrementGap="100" >
		  <analyzer>
		    <tokenizer class="solr.KeywordTokenizerFactory"/>
		    <filter class="solr.LowerCaseFilterFactory"/>
		    <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
		    <filter class="solr.TrimFilterFactory" />
		    <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
		  </analyzer>
		</fieldType>
	</types>

	<!--  xinclude fields-->
	<xi:include href="../../generalConf/general_schema_fields.xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>

	<!--
		Field to use to determine and enforce document uniqueness. Unless this
		field is marked with required="false", it will be a required field
	-->
	<uniqueKey>id</uniqueKey>
	<fields>
		<field name="keywords_facet" type="keywordString" indexed="true" stored="false" multiValued="true" />
		<copyField source="keywords" dest="keywords_facet" />
		<field name="taxonomy_targetgroups" type="keywordString" indexed="true" stored="true" multiValued="true" />
		<field name="taxonomy_keywords" type="keywordString" indexed="true" stored="true" multiValued="true" />
		<field name="taxonomy_contenttypes" type="keywordString" indexed="true" stored="true" multiValued="true" />
		<!-- Fields used for the Nutch indexing, might not be requires in all instances, but does not hurt -->
		<field name="segment" type="string" stored="true" indexed="false"/>
		<field name="digest" type="string" stored="true" indexed="false"/>
		<field name="boost" type="float" stored="true" indexed="false"/>
	</fields>


</schema>
